/***************************************************************************
 * Copyright 2016 by fsoft - All rights reserved.                *    
 **************************************************************************/
package com.fsoft.template.service.validator;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.annotation.MessageEndpoint;
import org.springframework.integration.annotation.ServiceActivator;

import com.fsoft.template.exception.CommonException;
import com.fsoft.template.model.User;
import com.fsoft.template.repository.exception.RepositoryException;
import com.fsoft.template.service.UserService;

/**
 * Author : Nhu Dinh Thuan Email:nhudinhthuan@gmail.com Nov 15, 2017
 */
@MessageEndpoint
public class UserStorageValidator {

	@Autowired
	private UserService userService;

	@ServiceActivator(inputChannel = "user-registry-channel-3-validate-storage", outputChannel = "user-registry-channel-4-service")
	public User validate(User user) throws CommonException {
		Optional<User> optional = userService.get(user.getUsername());
		if (optional.isPresent()) {
			throw new RepositoryException(RepositoryException.DUPLICATED_ERROR,
					RepositoryException.DUPLICATED_ERROR_DESCRIPTION);
		}
		return user;
	}

	@ServiceActivator(inputChannel = "login-channel-3-validate-storage", outputChannel = "login-channel-4-service")
	public User login(User user) throws CommonException {
		Optional<User> optional = userService.get(user.getUsername());
		if (!optional.isPresent()) {
			throw new RepositoryException(RepositoryException.NOT_EXIST_ERROR,
					RepositoryException.NOT_EXIST_ERROR_DESCRIPTION);
		}
		User old = optional.get();
		if (!user.getPassword().equals(old.getPassword())) {
			throw new RepositoryException(RepositoryException.LOGIN_FAILURED_ERROR,
					RepositoryException.LOGIN_FAILURED_ERROR_DESCRIPTION);
		}
		return optional.get();
	}
}
